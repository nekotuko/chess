/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * 1. Make it so when you open the App, it shows an empty grid with position
 * labels and different colors for the positions.
 *
 * 2. Add pieces to the board. They don't have to move, just exist in the right
 * positions.
 *
 * 3. Implement moving functionality where you can move any piece anywhere,
 * forget about the rules.
 *
 * 4. Add rules for each piece so it can only be moved legally.
 */
public class App {

    private JFrame mFrame;

    private JPanel mPanel;

    private String[] mBoardGrid = new String[] {
        " abcdefgh ",
        "8        8",
        "7        7",
        "6        6",
        "5        5",
        "4        4",
        "3        3",
        "2        2",
        "1        1",
        " abcdefgh ",
    };

    // TODO: Check if this is the best way to declare 'mBoardLayout'
    private static String[] mBoardLayout = new String[] {
            "♜♞♝♛♚♝♞♜",
            "♟♟♟♟♟♟♟♟",
            "        ",
            "        ",
            "        ",
            "        ",
            "♙♙♙♙♙♙♙♙",
            "♖♘♗♕♔♗♘♖",
    };
    
    private class OnClickEvent extends MouseAdapter {
        private ChessBoard mBoard;

        public OnClickEvent(ChessBoard board) {
            mBoard = board;
        }

        public void mouseClicked(MouseEvent e) {
            // Shouldn't be called if click is outside of the board
            mBoard.receiveInput(getFromClick(e));

            refreshBoardGui(mBoard);
        }
    }

    private BoardPosition getFromClick(MouseEvent e) {
        int i = e.getY() / (mPanel.getHeight() / 10);
        int j = e.getX() / (mPanel.getWidth() / 10);

        BoardPosition pos = BoardPosition.fromGUICoords(i, j);

        System.out.println("Click coords: " + i + " " + j);
        System.out.println("Board coords: " + pos.i + " " + pos.j);

        return BoardPosition.fromGUICoords(i, j);
    }

    private void refreshBoardGui(ChessBoard board) {

        int i = 0;

        Component[] labels = mPanel.getComponents();

        while (i < mBoardGrid.length) {
            int j = 0;
            while (j < mBoardGrid[i].length()) {
                if ((i > 0 && i < mBoardGrid.length - 1) && (j > 0 && j < mBoardGrid[0].length() - 1)) {
                    JLabel currLabel = (JLabel) labels[i * 10 + j];
                    currLabel.setText(Character.toString(board.getPieceCharFromCoords(i - 1, j - 1)));
                }
                j++;
            }
            i++;
        }

    }

    private void initGui(ChessBoard board) {

        mFrame = new JFrame("Chess");

        mFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        mPanel = new JPanel(new GridLayout(mBoardGrid.length, mBoardGrid[0].length()));
        mPanel.setPreferredSize(new Dimension(800, 800));

        mPanel.addMouseListener(new OnClickEvent(board));

        for (int i = 0; i < mBoardGrid.length; i++) {
            for (int j = 0; j < mBoardGrid[i].length(); j++) {
                String currLabel = mBoardGrid[i].substring(j, j + 1);

                if ((i == 0 || i == mBoardGrid.length - 1) || (j == 0 || j == mBoardGrid[0].length() - 1)) {
                    mPanel.add(new JLabel(currLabel, JLabel.CENTER));
                } else {
                    JLabel gridRectangle = new JLabel(Character.toString(board.getPieceCharFromCoords(i - 1, j - 1)));
                    gridRectangle.setHorizontalAlignment(JLabel.CENTER);
                    gridRectangle.setFont(gridRectangle.getFont().deriveFont(50.0f));
                    gridRectangle.setOpaque(true);

                    // TODO: Check if this can cause issues:
                    if ((i + j) % 2 == 0) {
                        gridRectangle.setBackground(Color.white);
                    } else {
                        gridRectangle.setBackground(Color.lightGray);
                    }

                    mPanel.add(gridRectangle);
                }

            }
        }

        mFrame.setContentPane(mPanel);
        mFrame.pack();
        mFrame.setLocationRelativeTo(null);
        mFrame.setVisible(true);
    }

    public static void main(String[] args) {
        System.out.println("Started the Chess app.");

        ChessBoard board = new ChessBoard(mBoardLayout);

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new App().initGui(board);
            }
        });
    }
}
