/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.Set;
import java.util.HashSet;

import java.awt.Dimension;
import java.awt.GridLayout;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * 1. Make it so when you open the App, it shows an empty grid with position
 * labels and different colors for the positions.
 *
 * 2. Add pieces to the board. They don't have to move, just exist in the right
 * positions.
 *
 * 3. Implement moving functionality where you can move any piece anywhere,
 * forget about the rules.
 *
 * 4. Add rules for each piece so it can only be moved legally.
 */
public class App {

    private JFrame mFrame;
    private JPanel mPanel;
    private Set<CustomLabel> mBoardLabelSet;

    private ChessBoard mBoard;

    private String[] mBoardGrid = new String[] {
            " abcdefgh ",
            "8        8",
            "7        7",
            "6        6",
            "5        5",
            "4        4",
            "3        3",
            "2        2",
            "1        1",
            " abcdefgh ",
    };
    
    private static String[] mBoardLayout = new String[] {
            "♜♞♝♛♚♝♞♜",
            "♟♟♟♟♟♟♟♟",
            "        ",
            "        ",
            "        ",
            "        ",
            "♙♙♙♙♙♙♙♙",
            "♖♘♗♕♔♗♘♖",
    };

    void refreshGuiSquares() {
        for (CustomLabel currBoardLabel : mBoardLabelSet) {
            currBoardLabel.refresh();
        }
    }

    private void init() {
        // Build the chess board:
        mBoard = new ChessBoard(mBoardLayout);

        // Initialize GUI:
        initGui();

        // Update GUI based on chess board:
        refreshGuiSquares();
    }

    private void initGui() {

        mFrame = new JFrame("Chess");

        mFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        mPanel = new JPanel(new GridLayout(mBoardGrid.length, mBoardGrid[0].length()));
        mPanel.setPreferredSize(new Dimension(800, 800));

        mBoardLabelSet = new HashSet<CustomLabel>();

        for (int i = 0; i < mBoardGrid.length; i++) {
            for (int j = 0; j < mBoardGrid[i].length(); j++) {

                // If the coordinates are at the border, grab the label and create a refular
                // JLabel:
                if ((i == 0 || i == mBoardGrid.length - 1) || (j == 0 || j == mBoardGrid[0].length() - 1)) {
                    mPanel.add(new JLabel(mBoardGrid[i].substring(j, j + 1), JLabel.CENTER));
                } else { // Else create a blank 'CustomLabel':
                    // TODO: flip 'i' to match GUI ordering:
                    CustomLabel currLabel = new CustomLabel(this, mBoard, 7 - (i - 1), j - 1, "");
                    mPanel.add(currLabel);
                    mBoardLabelSet.add(currLabel);
                }
            }
        }

        mFrame.setContentPane(mPanel);
        mFrame.pack();
        mFrame.setLocationRelativeTo(null);
        mFrame.setVisible(true);
    }

    public static void main(String[] args) {
        System.out.println("Started the Chess app.");

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new App().init();
            }
        });
    }
}
